---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';
import BlogPostingStructuredData from '../../components/BlogPostingStructuredData.astro';

export const prerender = true;

export async function getStaticPaths() {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { slug: post.slug },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'blog'>; prevPost: CollectionEntry<'blog'>; nextPost: CollectionEntry<'blog'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, publishDate, updatedDate, excerpt, tags = [], seo, image } = post.data;
const { Content, remarkPluginFrontmatter } = await post.render();
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image ?? image} pageType="article" showHeader={false}>
    <BlogPostingStructuredData slot="structured-data" {...post.data} body={post.body} />
    <article class="mb-16 sm:mb-24">
        {
            image && (
                <div class="relative mb-8 -mx-4 sm:mx-0 sm:rounded-xl overflow-hidden aspect-[16/9]">
                    <img
                        src={image.src}
                        alt={image.alt}
                        class="absolute inset-0 w-full h-full object-cover"
                        loading="eager"
                        width="1200"
                        height="675"
                        transition:name={`post-image-${post.slug}`}
                    />
                </div>
            )
        }
        <header class="mb-8 mt-6">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight" transition:name={`post-title-${post.slug}`}>
                {title}
            </h1>
            <div class="mt-4 text-sm flex items-center flex-wrap gap-x-2" transition:name={`post-meta-${post.slug}`}>
                <FormattedDate date={publishDate} />
                {
                    tags.length > 0 && (
                        <>
                            <span class="text-neutral-500">/</span>
                            <span>in</span>
                            <span class="inline-flex items-center gap-1 whitespace-nowrap">
                                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"/>
                                    <line x1="7" y1="7" x2="7.01" y2="7"/>
                                </svg>
                                <a href={`/categories/${slugify(tags[0])}`} class="text-main hover:underline">
                                    {tags[0]}
                                </a>
                            </span>
                        </>
                    )
                }
                {
                    updatedDate && (
                        <>
                            <span class="text-neutral-500">/</span>
                            <span>
                                (Updated on <FormattedDate date={updatedDate} />)
                            </span>
                        </>
                    )
                }
                {
                    remarkPluginFrontmatter.minutesRead && (
                        <>
                            <span class="text-neutral-500">/</span>
                            <span class="inline-flex items-center gap-1 whitespace-nowrap">
                                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                    <circle cx="12" cy="12" r="10"/>
                                    <polyline points="12 6 12 12 16 14"/>
                                </svg>
                                {remarkPluginFrontmatter.minutesRead}
                            </span>
                        </>
                    )
                }
            </div>
        </header>

        <div class="max-w-none prose prose-dante dark:prose-invert sm:prose-lg" transition:animate="slide">
            <Content />
        </div>

        <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Copied">
                Share
            </Button>
        </div>
    </article>

    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Read Next</h2>
                {nextPost && <PostPreview post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
                {prevPost && <PostPreview post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />}
            </div>
        )
    }
</BaseLayout>

<script>
    function setupCopyButton() {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        if (!copyUrlButton) return;

        copyUrlButton.addEventListener('click', async () => {
            const url = copyUrlButton.getAttribute('data-url') || window.location.href;
            const defaultLabel = copyUrlButton.innerText;
            
            try {
                await navigator.clipboard.writeText(url);
                
                copyUrlButton.innerText = copyUrlButton.getAttribute('data-tooltip-success') || 'Copied';
                
                setTimeout(() => {
                    copyUrlButton.innerText = defaultLabel;
                }, 2500);
            } catch (err) {
                console.error('Failed to copy:', err);
            }
        });
    }

    // Setup on initial load
    setupCopyButton();
    
    // Setup on subsequent navigations
    document.addEventListener('astro:page-load', setupCopyButton);
</script>